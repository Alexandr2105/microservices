// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.29.0
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface UserId {
  id: string;
}

export interface UserEmail {
  email: string;
}

export interface UserDto {
  login: string;
  email: string;
  password: string;
}

export interface UserResponse {
  id: string;
  login: string;
  email: string;
}

export interface AllUserResponse {
  id: string;
  login: string;
  email: string;
  password: string;
}

export interface AccessTokenResponse {
  accessToken: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  getUserById(request: UserId): Observable<UserResponse>;

  registration(request: UserDto): Observable<AccessTokenResponse>;

  login(request: UserId): Observable<AccessTokenResponse>;

  getUserByEmail(request: UserEmail): Observable<AllUserResponse>;
}

export interface AuthServiceController {
  getUserById(request: UserId): Promise<UserResponse> | Observable<UserResponse> | UserResponse;

  registration(request: UserDto): Promise<AccessTokenResponse> | Observable<AccessTokenResponse> | AccessTokenResponse;

  login(request: UserId): Promise<AccessTokenResponse> | Observable<AccessTokenResponse> | AccessTokenResponse;

  getUserByEmail(request: UserEmail): Promise<AllUserResponse> | Observable<AllUserResponse> | AllUserResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUserById", "registration", "login", "getUserByEmail"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
