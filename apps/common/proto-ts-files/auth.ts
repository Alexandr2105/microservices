// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v3.21.12
// source: auth.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "auth";

export interface GetUserById {
  id: string;
}

export interface CreateUser {
  login: string;
  email: string;
  password: string;
}

export interface GetUserResponse {
  id: string;
  login: string;
  email: string;
}

export const AUTH_PACKAGE_NAME = "auth";

export interface AuthServiceClient {
  getUser(request: GetUserById): Observable<GetUserResponse>;

  createNewUser(request: CreateUser): Observable<GetUserResponse>;
}

export interface AuthServiceController {
  getUser(request: GetUserById): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;

  createNewUser(request: CreateUser): Promise<GetUserResponse> | Observable<GetUserResponse> | GetUserResponse;
}

export function AuthServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getUser", "createNewUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("AuthService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const AUTH_SERVICE_NAME = "AuthService";
