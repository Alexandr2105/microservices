// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.29.0
// source: product.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

export interface ProductInfo {
  name: string;
  description: string;
  price: number;
  quantity: number;
}

export interface UpdateProductById {
  name: string;
  description: string;
  price: number;
  quantity: number;
  id: string;
}

export interface ProductId {
  id: string;
}

export interface GetProductByIdResponse {
  product?: ProductResponse | undefined;
  empty?: EmptyResponse | undefined;
}

export interface ProductResponse {
  id: string;
  name: string;
  description: string;
  price: string;
  quantity: string;
  updatedAt: string;
  createdAt: string;
}

export interface EmptyResponse {
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  createProduct(request: ProductInfo): Observable<ProductResponse>;

  getProductById(request: ProductId): Observable<GetProductByIdResponse>;

  updateProduct(request: UpdateProductById): Observable<EmptyResponse>;

  deleteProduct(request: ProductId): Observable<EmptyResponse>;
}

export interface ProductServiceController {
  createProduct(request: ProductInfo): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  getProductById(
    request: ProductId,
  ): Promise<GetProductByIdResponse> | Observable<GetProductByIdResponse> | GetProductByIdResponse;

  updateProduct(request: UpdateProductById): Promise<EmptyResponse> | Observable<EmptyResponse> | EmptyResponse;

  deleteProduct(request: ProductId): Promise<EmptyResponse> | Observable<EmptyResponse> | EmptyResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createProduct", "getProductById", "updateProduct", "deleteProduct"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
